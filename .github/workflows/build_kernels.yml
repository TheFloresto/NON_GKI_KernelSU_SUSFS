 name: Kernel Build
 on:
  workflow_dispatch:
    inputs:
      pre_release:
        description: 'Make it a prerelease?'
        required: false
        type: boolean
        default: true
      scheduled:
        description: 'Is it a scheduled build?'
        required: false
        type: boolean
        default: false
  workflow_call:
  pull_request:
  push:
    paths-ignore:
      - 'README.md'
 jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
     fail-fast: false
     matrix:
      kernel_config:
       - kernel_name: "SM6125"
         kernel_url: "https://github.com/LineageOS/android_kernel_xiaomi_sm6125"
         anykernel_branch: "sm6125"
         tag: "SM6125-22.2"
         defconfig: "vendor/trinket-perf_defconfig"
         config: "vendor/xiaomi-trinket.config vendor/laurel_sprout.config"
         patches_folder: "sm6125"
         python3_patch: false

       - kernel_name: "Snowflake"
         kernel_url: "https://github.com/liquidprjkt/snowflake_laurel_sprout"
         kernel_branch: "snowflake_noname"
         tag: "Snowflake"
         defconfig: "vendor/laurel_sprout-perf_defconfig"

       - kernel_name: "N18.1"
         kernel_url: "https://github.com/TheSillyOk/kernel_laurel_sprout" 
         kernel_branch: "lineage-18.1"
         tag: "NoName-18.1"

       - kernel_name: "N-VIC"
         kernel_url: "https://github.com/TheSillyOk/kernel_laurel_sprout" 
         kernel_branch: "vic"
         tag: "NoName-VIC"

      build_type: ["Normal", "KSUN", "RKSU"]
      susfs: [false, true]
      exclude:
           - build_type: "Normal"
             susfs: true
    permissions:
      contents: write
    steps:
      - name: Output configs
        id: variable
        run: |

          set_config() {
            local name="$1"
            local default_value="$2"
            local value="$3"

            if [[ "$name" == *"branch"* && "$value" == *"-b " ]]; then
              echo "$name=$default_value" >> $GITHUB_ENV
              echo "$name -> \"$default_value\""
            else
             if [ -z "$value" ]; then
              echo "$name=$default_value" >> $GITHUB_ENV
              echo "$name -> \"$default_value\""
             else
               echo "$name=$value" >> $GITHUB_ENV
               echo "$name -> \"$value\""
             fi
            fi
          }

          set_config "defconfig" "vendor/laurel_sprout-perf_defconfig" "${{ matrix.kernel_config.defconfig }}"
          set_config "config" "${{ matrix.kernel_config.config }}"

          set_config "patches_url" "https://github.com/TheSillyOk/kernel_ls_patches" "${{ matrix.kernel_config.patches_url }}"
          set_config "patches_branch" "" " -b ${{ matrix.kernel_config.patches_branch }}"
          set_config "patches_folder" "noname" "${{ matrix.kernel_config.patches_folder }}"

          set_config "anykernel_url" "https://github.com/TheSillyOk/anykernel" "${{ matrix.kernel_config.anykernel_url }}"
          set_config "anykernel_branch" "" " -b ${{ matrix.kernel_config.anykernel_branch }}"

          set_config "kernel_branch" "" " -b ${{ matrix.kernel_config.kernel_branch }}"

          set_config "susfs_branch" "kernel-4.14" "${{ matrix.kernel_config.susfs_branch }}"
          set_config "device" "MiA3" "${{ matrix.kernel_config.device }}"
          set_config "python3" true "${{ matrix.kernel_config.python3_patch }}"



      - name: Maximize build space
        uses: easimon/maximize-build-space@master
        with:
          root-reserve-mb: 10192
          temp-reserve-mb: 2048
          swap-size-mb: 6192
          remove-dotnet: "true"
          remove-android: "true"
          remove-haskell: "true"
          remove-codeql: "true"

      - name: Initialize workspace and tools
        id: workspace
        run: |
          set -e

          WORKSPACE_FOLDER="${GITHUB_WORKSPACE}/workspace"
          echo "workspace_folder=$WORKSPACE_FOLDER" >> $GITHUB_ENV
          mkdir -p "$WORKSPACE_FOLDER"

          sudo apt-get update -y -qq
          sudo apt-get install -y --no-install-recommends \
            python3-pip \
            git \
            zip \
            unzip \
            gcc \
            g++ \
            make \
            ninja-build \
            file \
            bc \
            bison \
            flex \
            libfl-dev \
            libssl-dev \
            libelf-dev \
            wget \
            build-essential \
            python3-dev \
            python3-setuptools \
            rsync \
            ccache \
            llvm-dev

          sudo apt install libncurses6 libfdt-dev
          echo "tools_folder=$WORKSPACE_FOLDER" >> $GITHUB_ENV

      - name: Cache Clang
        uses: actions/cache@v4
        id: cache-clang
        with:
          path: ${{ env.workspace_folder }}/clang
          key: clang-r547379-ubuntu-latest
          restore-keys: |
            clang-r547379-ubuntu-latest
            clang-r547379-

      - name: Download and Extract Clang
        if: steps.cache-clang.outputs.cache-hit != 'true'
        working-directory: ${{ env.workspace_folder }}
        run: |
          set -e
          echo "Downloading and extracting clang..."
          wget https://android.googlesource.com/platform/prebuilts/clang/host/linux-x86/+archive/refs/heads/main/clang-r547379.tar.gz -O clang.tar.gz
          mkdir -p clang
          tar -xf clang.tar.gz -C clang
          echo "Clang downloaded and extracted."

      - name: Set up ccache
        run: |
         ccache --version
         ccache --max-size=2G
         ccache --set-config=compression=true
         echo "CCACHE_DIR=$HOME/.ccache" >> $GITHUB_ENV

      - name: Cache kernel build
        uses: actions/cache@v4
        with:
         path: ~/.ccache
         key: ${{ matrix.build_type }}-${{ matrix.kernel_config.tag }}-SUSFS_${{ matrix.susfs }}-ccache-${{ github.sha }}-${{ github.run_number }}
         restore-keys: |
           ${{ matrix.build_type }}-${{ matrix.kernel_config.tag }}-SUSFS_${{ matrix.susfs }}-ccache-${{ github.sha }}
           ${{ matrix.build_type }}-${{ matrix.kernel_config.tag }}-SUSFS_${{ matrix.susfs }}-ccache
           ${{ matrix.build_type }}-${{ matrix.kernel_config.tag }}-
           -${{ matrix.kernel_config.tag }}-

      - name: Preparing kernel
        id: kernel
        run: |
          set -e

          KERNEL_FOLDER="${{ env.workspace_folder }}/kernel_tree"
          echo "kernel_folder=$KERNEL_FOLDER" >> $GITHUB_ENV
          git clone --depth=1 "${{ matrix.kernel_config.kernel_url }}"${{ env.kernel_branch }} "$KERNEL_FOLDER"
          cd "$KERNEL_FOLDER"

          PATCHES_FOLDER="${{ env.workspace_folder }}/kernel_patches"
          echo "patches_dir=$PATCHES_FOLDER" >> $GITHUB_ENV
          git clone "${{ env.patches_url }}"${{ env.patches_branch }} "$PATCHES_FOLDER"

          mkdir -p "$KERNEL_FOLDER/common/fs" "$KERNEL_FOLDER/common/include/linux"
           if ${{ env.python3 }}; then
             echo "--- Applying python3.patch... ---"
             patch -p1 -F 3 -N < "$PATCHES_FOLDER/python3.patch" || true
           fi

           echo "--- Applying fix_lto.patch... ---"
           patch -p1 < "$PATCHES_FOLDER/fix_lto.patch" || true

           echo "--- Applying ptrace_fix.patch... ---"
           patch -p1 < "$PATCHES_FOLDER/ptrace_fix.patch" || true

           echo "--- Applying 69_hide_stuff.patch... ---"
           patch -p1 -F 3 -N < "$PATCHES_FOLDER/69_hide_stuff.patch" || true

           sed -i 's/-dirty//' ./scripts/setlocalversion
           sed -i -E 's/^CONFIG_LOCALVERSION=(.*)//gi' "arch/arm64/configs/${{ env.defconfig }}"
           echo -e "\nCONFIG_LOCALVERSION=\"-Ok\"\n" >> "arch/arm64/configs/${{ env.defconfig }}"
           sed -i -E 's/^CONFIG_(LTO[^=]*|HAVE_LTO[^=]*|CC_OPTIMIZE_FOR[^=]*|MODVERSIONS)=(y|n)/# CONFIG_\1=\2/g' "arch/arm64/configs/${{ env.defconfig }}" && echo -e "\n\n# Workflow added configs #\nCONFIG_LTO_CLANG=y\nCONFIG_LTO_CLANG_THIN=y\nCONFIG_HAVE_LTO_CLANG=y\nCONFIG_CC_OPTIMIZE_FOR_PERFORMANCE=y\nCONFIG_MODVERSIONS=n" >> "arch/arm64/configs/${{ env.defconfig }}"

      - name: Apply KernelSU
        if: ${{ matrix.build_type != 'Normal' }}
        id: ksu
        run: |
          set -e

          cd "${{ env.kernel_folder }}"

          echo "--- Setting up KernelSU: ${{ matrix.build_type }} ---"
          case "${{ matrix.build_type }}-${{ matrix.susfs }}" in
           KSU-*)
            curl -LSs "https://raw.githubusercontent.com/tiann/KernelSU/main/kernel/setup.sh" | bash -s v0.9.5
             patch -p1 -F 3 -N < "${{ env.patches_dir }}/path_unmount.patch" || true
             patch -p1 -F 3 -N < "${{ env.patches_dir }}/get_cred_rcu.patch"
             patch -p1 -F 3 -N < "${{ env.patches_dir }}/strncpy_from_user_nofault.patch"
             patch -p1 -F 3 -N < "${{ env.patches_dir }}/KSUN/scope_min_manual_hooks_v1.4.patch" || true
            cd KernelSU
           ;;
           KSUN-*)
            curl -LSs "https://raw.githubusercontent.com/rifsxd/KernelSU-Next/next/kernel/setup.sh" | bash -s next
             patch -p1 -F 3 -N < "${{ env.patches_dir }}/KSUN/syscall_hooks.patch" || true
            cd KernelSU-Next
           ;;
           RKSU-false)
            curl -LSs "https://raw.githubusercontent.com/rsuntk/KernelSU/main/kernel/setup.sh" | bash -s main
             patch -p1 -F 3 -N < "${{ env.patches_dir }}/path_unmount.patch" || true
             patch -p1 -F 3 -N < "${{ env.patches_dir }}/get_cred_rcu.patch"
             patch -p1 -F 3 -N < "${{ env.patches_dir }}/strncpy_from_user_nofault.patch"
             patch -p1 -F 3 -N < "${{ env.patches_dir }}/KSUN/syscall_hooks.patch" || true
            cd KernelSU
           ;;
           RKSU-true)
            curl -LSs "https://raw.githubusercontent.com/rsuntk/KernelSU/main/kernel/setup.sh" | bash -s susfs-main
             patch -p1 -F 3 -N < "${{ env.patches_dir }}/path_unmount.patch" || true
             patch -p1 -F 3 -N < "${{ env.patches_dir }}/get_cred_rcu.patch"
             patch -p1 -F 3 -N < "${{ env.patches_dir }}/strncpy_from_user_nofault.patch"
             patch -p1 -F 3 -N < "${{ env.patches_dir }}/KSUN/syscall_hooks.patch" || true
            cd KernelSU
           ;;
           *)
            echo "Invalid selection for build_type and/or susfs: ${{ matrix.build_type }}-${{ matrix.susfs }}"
           ;;
          esac
          echo "--- ${{ matrix.build_type }} setup complete ---"
           cd ${{ env.kernel_folder }}

          # Append configuration settings to the defconfig file
           sed -i -E 's/^CONFIG_(KPROBES|TMPFS_XATTR|KSU[^=]*)=(y|n)/# CONFIG_\1=\2/g' "arch/arm64/configs/${{ env.defconfig }}"
           echo -e "\nCONFIG_KPROBES=n\nCONFIG_KSU=y\nCONFIG_TMPFS_XATTR=y\n" >> "arch/arm64/configs/${{ env.defconfig }}"

      - name: Apply SUSFS
        if: ${{ matrix.susfs }}
        id: susfs
        run: |
          set -e

          SUSFS_FOLDER="${{ env.workspace_folder }}/susfs4ksu"
          SUSFS_PATCHES="$SUSFS_FOLDER/kernel_patches"
          echo "susfs_patches=$SUSFS_PATCHES" >> $GITHUB_ENV
          git clone https://gitlab.com/simonpunk/susfs4ksu.git -b "${{ env.susfs_branch }}" "$SUSFS_FOLDER"

          cd "${{ env.kernel_folder }}"
          echo "--- Applying SUSFS Patches for ${{ matrix.build_type }} ---"
          case "${{ matrix.build_type }}" in
            KSU)
             echo "--- Applying 50_add_susfs.patch... ---"
             patch -p1 -F 3 -N < "$SUSFS_PATCHES/50_add_susfs_in_${{ env.susfs_branch }}.patch" || true
             echo "--- Applying fix_susfs_rejects.patch... ---"
             patch -p1 -F 3 -N < "${{ env.patches_dir }}/${{ env.patches_folder }}/fix_susfs_rejects.patch" || true
             cp -r $SUSFS_PATCHES/fs/* ${{ env.kernel_folder }}/fs/
             cp -r $SUSFS_PATCHES/include/linux/* ${{ env.kernel_folder }}/include/linux
             cd KernelSU
             echo "--- Applying 10_enable_susfs_for_ksu.patch ---"
             patch -p1 -F 3 -N < "$SUSFS_PATCHES/KernelSU/10_enable_susfs_for_ksu.patch"
            ;;
            RKSU)
             echo "--- Applying 50_add_susfs.patch... ---"
             patch -p1 -F 3 -N < "$SUSFS_PATCHES/50_add_susfs_in_${{ env.susfs_branch }}.patch" || true
             echo "--- Applying fix_susfs_rejects.patch... ---"
             patch -p1 -F 3 -N < "${{ env.patches_dir }}/${{ env.patches_folder }}/fix_susfs_rejects.patch" || true
             cp -r $SUSFS_PATCHES/fs/* ${{ env.kernel_folder }}/fs/
             cp -r $SUSFS_PATCHES/include/linux/* ${{ env.kernel_folder }}/include/linux
             echo "--- Applying BACKPORT-SUSFS-v1.5.7-NON-GKI-4.14.patch ---"
             patch -p1 -F 3 -N < "${{ env.patches_dir }}/BACKPORT-SUSFS-v1.5.7-NON-GKI-4.14.patch"
            ;;
            KSUN)
             echo "--- Applying susfs-1.5.8.patch ---"
             patch -p1 -F 3 -N < "${{ env.patches_dir }}/susfs-1.5.8.patch" || true
             echo "--- Applying fix_susfs-1.5.8_rejects.patch... ---"
             patch -p1 -F 3 -N < "${{ env.patches_dir }}/${{ env.patches_folder }}/fix_susfs-1.5.8_rejects.patch" || true
             cd ./KernelSU-Next
             echo "--- Applying 0001-kernel-implement-susfs-v1.5.8-KernelSU-Next-v1.0.8.patch ---"
             patch -p1 --forward --fuzz=3 < ${{ env.patches_dir }}/KSUN/0001-kernel-implement-susfs-v1.5.8-KernelSU-Next-v1.0.8.patch
            ;;
          esac
          echo "--- Additional ${{ matrix.build_type }} patches applied ---"
          cd ${{ env.kernel_folder }}


          echo "--- SUSFS Patches applied ---"
          echo -e "\nCONFIG_KSU_SUSFS=y\nCONFIG_KSU_SUSFS_SUS_PATH=y\n" >> "arch/arm64/configs/${{ env.defconfig }}"


      - name: Building kernel
        id: build
        run: |
          set -e
          cd ${{ env.kernel_folder }}

          if [[ "${{ matrix.kernel_config.tag }}" == *"SM6125"* ]]; then
           EXTRA=" DTC_PREBUILT=true DTC=${{ env.kernel_folder }}/dtc/dtc DTC_OVERLAY_TEST_EXT=${{ env.kernel_folder }}/libufdt/ufdt_apply_overlay MKDTIMG=${{ env.kernel_folder }}/libufdt/mkdtimg"
           wget https://android.googlesource.com/platform/prebuilts/misc/+archive/refs/tags/android-15.0.0_r26/linux-x86.tar.gz -O androd.tar.gz
           tar -xzf androd.tar.gz
           git clone https://github.com/TheSillyOk/kernel_extra -b main extra
           rm dtc/dtc && mv extra/dtc dtc/dtc
           chmod +x dtc/dtc
          else
           EXTRA=""
          fi

          echo "Building kernel using absolute paths..."
          export CCACHE_EXEC=$(which ccache)
          export ARCH=arm64
          export SUBARCH=arm64
          export KBUILD_BUILD_USER="Ok"
          export KBUILD_BUILD_HOST="Github"
          export PATH="${{ env.tools_folder }}/clang/bin:$PATH"
          BUILD_START_TIME=$(date +%s)

          mkdir -p "${{ env.kernel_folder }}/artifacts"

          make O="${{ env.kernel_folder }}/out" ARCH=arm64 ${{ env.defconfig }} ${{ env.config }}
          make O="${{ env.kernel_folder }}/out"$EXTRA CC="ccache clang" LD=ld.lld LLVM=1 LLVM_IAS=1 -j"$(nproc --all)" CROSS_COMPILE=aarch64-linux-gnu-

          BUILD_END_TIME=$(date +%s)
          DIFF=$((BUILD_END_TIME - BUILD_START_TIME))
          echo "elapsed_time=$DIFF" >> $GITHUB_OUTPUT
          echo -e "Build completed in $((DIFF / 60)) minute(s) and $((DIFF % 60)) seconds."


      - name: Handle AnyKernel3 zips
        id: anykernel
        run: |
          set -e

          BOOT_FOLDER="${{ env.kernel_folder }}/out/arch/arm64/boot"
          cd "$BOOT_FOLDER"

          git clone --recursive --depth=1 "${{ env.anykernel_url }}"${{ env.anykernel_branch }} "$BOOT_FOLDER/ak_folder"

          if [ -e "$BOOT_FOLDER/Image.gz-dtb" ]; then
            cp -f "$BOOT_FOLDER/Image.gz-dtb" "$BOOT_FOLDER/ak_folder"
          else

           if [ -e "$BOOT_FOLDER/Image.gz" ]; then
             cp -f "$BOOT_FOLDER/Image.gz" "$BOOT_FOLDER/ak_folder"
           fi

          fi

          if [ -e "$BOOT_FOLDER/dtbo.img" ]; then
            cp -f "$BOOT_FOLDER/dtbo.img" "$BOOT_FOLDER/ak_folder"
          fi

          case "${{ matrix.build_type }}-${{ matrix.susfs }}" in
           KSUN-false)
            BUILD="-KSUNext"
           ;;
           KSUN-true)
            BUILD="-KSUNext.SUSFS"
           ;;
           KSU-false)
            BUILD="-KSU"
           ;;
           KSU-true)
            BUILD="-KSU.SUSFS"
           ;;
           RKSU-false)
            BUILD="-RKSU"
           ;;
           RKSU-true)
            BUILD="-RKSU.SUSFS"
           ;;
           Normal*)
            BUILD=""
           ;;
           *)
            BUILD=""
            echo "Invalid selection for build_type and/or susfs: ${{ matrix.build_type }}-${{ matrix.susfs }}"
           ;;
          esac


          date="$(date +"%Y.%m.%d")"
          zip_name="$date-${{ env.device }}$BUILD-${{ matrix.kernel_config.tag }}-${{ github.run_number }}"
          mkdir release
          rm -rf ak_folder/*.git*
          cp -r ak_folder/* release
          echo "anykernel_zipname=$zip_name" >> $GITHUB_OUTPUT

      - name: Upload AnyKernel Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.anykernel.outputs.anykernel_zipname }}
          path: |
            ${{ env.kernel_folder }}/out/arch/arm64/boot/release/

  release:
    needs: build
    permissions:
      contents: write
    runs-on: ubuntu-latest
    steps:
      - name: Download Artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./downloaded-artifacts

      - name: Setup env variables
        run: |
          get_ref() {
            local name="$1" repo="$2" path="$3" mode="$4" head="$5"
            if [[ "$mode" == "tag" ]]; then
              ref=$(git ls-remote --tags --sort=-v:refname "$repo" | grep -o 'refs/tags/.*' | cut -d/ -f3 | head -n1)
              url="https://github.com/$path/releases/tag/$ref"
            else
              ref=$(git ls-remote "$repo" $head | awk '{print $1}')
              url="https://github.com/$path/commit/$ref"
            fi
            # echo "${name}_REF=$ref" >> $GITHUB_ENV
            echo "${name}_URL=$url" >> $GITHUB_ENV
          }

          get_ref "KSUN" "https://github.com/KernelSU-Next/KernelSU-Next.git" "KernelSU-Next/KernelSU-Next" "commit" "HEAD"

          get_ref "RKSU" "https://github.com/rsuntk/KernelSU" "rsuntk/KernelSU" "commit" "HEAD"
          get_ref "RKSU-SUSFS" "https://github.com/rsuntk/KernelSU" "rsuntk/KernelSU" "commit" "susfs-main"

          SUSFS_COMMIT_HASH=$(git ls-remote https://gitlab.com/simonpunk/susfs4ksu.git refs/heads/kernel-4.14 | awk '{ print $1 }')
          echo "SUSFS_COMMIT_HASH=$SUSFS_COMMIT_HASH" >> $GITHUB_ENV

          echo "artifacts_dir=$PWD/downloaded-artifacts" >> $GITHUB_ENV

          date="$(date +"%d/%m/%Y")"
          echo "date=$date" >> $GITHUB_ENV

          if [ "${{ inputs.scheduled }}" == "true" ]; then
           echo"tg_title=A new scheduled build has been completed!" >> $GITHUB_ENV
          else
           echo"tg_title=A new kernel CI release has been completed!" >> $GITHUB_ENV
          fi

          echo "run=${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}" >> $GITHUB_ENV
          echo "nightly_run=https://nightly.link/TheSillyOk/kernel_laurel_sprout_workflows/actions/runs/${{ github.run_id }}" >> $GITHUB_ENV

          git clone https://github.com/TheSillyOk/sh
          echo "sh_dir=$PWD/sh" >> $GITHUB_ENV
          cp sh/extract_ksuver.sh $PWD

          echo "KSUN_V=$(bash ./extract_ksuver.sh "https://github.com/KernelSU-Next/KernelSU-Next" "kernel/Makefile" "kernel" "next")" >> $GITHUB_ENV
          echo "RKSU_V=$(bash ./extract_ksuver.sh "https://github.com/rsuntk/KernelSU" "kernel/Makefile" "kernel" "main")" >> $GITHUB_ENV
          echo "RKSU-SUSFS_V=$(bash ./extract_ksuver.sh "https://github.com/rsuntk/KernelSU" "kernel/Makefile" "kernel" "susfs-main")" >> $GITHUB_ENV

      - name: Set release body
        run: |
          cat << 'EOF' > release_body.md
          Kernels w/ KSU (and forks) + SUSFS by @TheSillyOk

          Updated: ${{ env.date }}

          [Updates](https://t.me/ok_kernel) • [Support](https://t.me/ok_kernel_chat) 

          [Github run](${{ env.run }}) • [Nightly run](${{ env.nightly_run }})

          [SUSFS Module](https://github.com/sidex15/ksu_module_susfs/releases)

          KSU Managers:
          -> Rissu's KernelSU (`RKSU`): [Manager](https://github.com/rsuntk/KernelSU/releases) / [Alternative](https://t.me/mksu_ci)
          -> KernelSU-Next (`KSUN`): [Releases](https://github.com/rifsxd/KernelSU-Next/releases) / [CI builds](https://t.me/ksunext_ci)

          Versions used for KernelSU variants & susfs:
          -> Rissu's KernelSU  (`RKSU`): [${{ env.RKSU_V }}](${{ env.RKSU_URL }}) - SUSFS 1.5.7 ([${{ env.RKSU-SUSFS_V }}](${{ env.RKSU-SUSFS_URL }}))
          -> KernelSU Next (`KSUN`): [${{ env.KSUN_V }}](${{ env.KSUN_URL }}) - SUSFS 1.5.8
          -> SUSFS4KSU: [${{ env.SUSFS_COMMIT_HASH }}](https://gitlab.com/simonpunk/susfs4ksu/-/commit/${{ env.SUSFS_COMMIT_HASH }})

          Credits:
          • @Skyblueborb for helping in building the kernel & kernel source
          • @aleeeee1 & @PowerX-NOT & @RainySorcerer for kernel sources
          EOF

      - name: Set release tag
        env:
         GH_TOKEN: ${{ github.token }}
        run: |
            gh auth setup-git
            git clone https://github.com/TheSillyOk/kernel_laurel_sprout_workflows --depth=1 --branch="${{ github.ref_name }}" repo
            cd repo
            echo "repo_dir=$PWD" >> $GITHUB_ENV

            if [ "${{ github.ref_type }}" != "tag" ]; then
              if [[ "${{ inputs.pre_release }}" != "false" || "${{ github.ref_name }}" != "master" ]]; then
                TAG=$(date +"%Y/%m/%d")-test
                gh release delete "$TAG" -y || true
              else
                TAG=$(date +"%Y/%m/%d")-r1
                LATEST_TAG=$(gh api repos/${{ github.repository }}/tags --jq '.[0].name')
                BEFORE_LATEST_TAG=$(gh api repos/${{ github.repository }}/tags --jq '.[1].name')

                if [[ "$LATEST_TAG" == "$TAG" && "$BEFORE_LATEST_TAG" != "$TAG"* ]]; then
                  TAG=$(echo "$LATEST_TAG" | awk -F'-r' '{suffix=$2; if (!suffix) suffix=0; suffix++; printf "%s-r%d", $1, suffix}')
                elif [[ "$LATEST_TAG" == "$TAG"* && "$BEFORE_LATEST_TAG" == "$TAG"* ]]; then
                  LATEST_SUFFIX=$(echo "$LATEST_TAG" | awk -F'-r' '{suffix=$2; if (!suffix) suffix=0; suffix++; printf "%d", suffix}')
                  BEFORE_LATEST_SUFFIX=$(echo "$BEFORE_LATEST_TAG" | awk -F'-r' '{suffix=$2; if (!suffix) suffix=0; suffix++; printf "%d", suffix}')
                  if [ "$LATEST_SUFFIX" -gt "$BEFORE_LATEST_SUFFIX" ]; then 
                    TAG="$TAG-r$LATEST_SUFFIX"
                  else
                    TAG="$TAG-r$BEFORE_LATEST_SUFFIX"
                  fi
                fi
              fi

              echo "Created tag: $TAG"
              echo "TAG=$TAG" >> $GITHUB_ENV

              git tag $TAG
              git push origin $TAG || true
            else
              echo "TAG=${{ github.ref_name }}" >> $GITHUB_ENV
            fi

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.TAG }}
          prerelease: ${{ endsWith(env.TAG, '-test') }}
          files: ""
          name: ${{ env.date }}
          body_path: release_body.md

      - name: Upload Release Assets
        env:
         GH_TOKEN: ${{ github.token }}
        run: |
          bash ${{ env.sh_dir }}/upload-assets.sh "${{ env.TAG }}" "${{ env.repo_dir }}" "${{ env.artifacts_dir }}"

      - name: Send Telegram Notification (CI)
        run: |
          curl -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage" \
            -d "chat_id=@ok_kernel_ci" \
            -d "parse_mode=Markdown" \
            --data-urlencode "text=
            • 🔔 ${{ env.tg_title }}
            🏷️ *Branch*: ${{ github.ref_name }}
            📌 *Tag*: ${{ env.TAG }}
            📆 *Released*: ${{ env.date }}
            [Release](https://github.com/${{ github.repository }}/releases/tag/${{ env.TAG }}) • [Workflow run](${{ env.run }}) • [Nightly](${{ env.nightly_run }})
            
            • KernelSU-Next (KSUN) [${{ env.KSUN_V }}](${{ env.KSUN_URL }})
            • Rissu's KernelSU (RKSU) [${{ env.RKSU_V }}](${{ env.RKSU_URL }})
            —> w/ SUSFS: [${{ env.RKSU-SUSFS_V }}](${{ env.RKSU-SUSFS_URL }})"
