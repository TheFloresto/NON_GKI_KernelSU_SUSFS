 name: Kernel Build
 on:
  workflow_dispatch:
  pull_request:
  push:
 jobs:
  build:
    if: github.event.repository.owner.id == github.event.sender.id
    runs-on: ubuntu-latest
    strategy:
     matrix:
      kernel_config:
       - kernel_name: "SM6125"
         kernel_url: "https://github.com/Skyblueborb/android_kernel_xiaomi_sm6125"
         kernel_branch: "lineage-22.2-common"
         patches_branch: "new"
         anykernel_branch: "sm6125"
         tag: "[SM6125-LOS-22.2]"
         defconfig: "vendor/trinket-perf_defconfig"
         config: "vendor/laurel_sprout.config"
       - kernel_name: "Snowflake"
         kernel_url: "https://github.com/liquidprjkt/snowflake_laurel_sprout"
         kernel_branch: "snowflake_noname"
         tag: "[Snowflake]"
         defconfig: "vendor/laurel_sprout-perf_defconfig"
         config: ""
       - kernel_name: "NoName-LOS-22.1"
         kernel_url: "https://github.com/TheSillyOk/kernel_xiaomi_laurel_sprout-noname"
         kernel_branch: "heresy"
         tag: "[NoName-LOS-22.1]"
         defconfig: "vendor/laurel_sprout-perf_defconfig"
         config: ""
       - kernel_name: "NoName-LOS-18.1"
         kernel_url: "https://github.com/TheSillyOk/kernel_laurel_sprout" 
         kernel_branch: "lineage-18.1"
         tag: "[NoName-LOS-18.1]"
         defconfig: "vendor/laurel_sprout-perf_defconfig"
         config: ""
       - kernel_name: "NoName-VIC"
         kernel_url: "https://github.com/TheSillyOk/kernel_laurel_sprout" 
         kernel_branch: "vic"
         tag: "[NoName-VIC]"
         defconfig: "vendor/laurel_sprout-perf_defconfig"
         config: ""
      build_type: ["Normal", "KSUN"]
      susfs: [false, true]
      exclude:
           - build_type: "Normal"
             susfs: true
    permissions:
      contents: write
    steps:
      - name: Maximize build space
        uses: easimon/maximize-build-space@master
        with:
          root-reserve-mb: 8192
          temp-reserve-mb: 2048
          swap-size-mb: 8192
          remove-dotnet: "true"
          remove-android: "true"
          remove-haskell: "true"
          remove-codeql: "true"

      - name: Initialize workspace and tools
        id: workspace
        run: |
          set -e
          # Define an absolute workspace folder inside the GitHub workspace
          WORKSPACE_FOLDER="${GITHUB_WORKSPACE}/workspace"
          mkdir -p "$WORKSPACE_FOLDER"
          echo "workspace-folder=$WORKSPACE_FOLDER" >> $GITHUB_OUTPUT
          echo "start_time=$(date +%s)" >> $GITHUB_OUTPUT

          sudo apt-get update -y -qq
          sudo apt-get install -y --no-install-recommends \
            python3-pip \
            git \
            zip \
            unzip \
            gcc \
            g++ \
            make \
            ninja-build \
            file \
            bc \
            bison \
            flex \
            libfl-dev \
            libssl-dev \
            libelf-dev \
            wget \
            build-essential \
            python3-dev \
            python3-setuptools \
            rsync \
            ccache \
            llvm-dev

          sudo apt install libncurses6 libfdt-dev
          # Also output a tools folder variable (same as workspace here)
          echo "tools-folder=$WORKSPACE_FOLDER" >> $GITHUB_OUTPUT

      - name: Cache Clang
        uses: actions/cache@v4
        id: cache-clang
        with:
          path: ${{ steps.workspace.outputs.workspace-folder }}/clang
          key: clang-r547379-ubuntu-latest
          restore-keys: |
            clang-r547379-ubuntu-latest
            clang-r547379-

      - name: Download and Extract Clang
        if: steps.cache-clang.outputs.cache-hit != 'true'
        working-directory: ${{ steps.workspace.outputs.workspace-folder }}
        run: |
          set -e
          echo "Downloading and extracting clang..."
          wget https://android.googlesource.com/platform/prebuilts/clang/host/linux-x86/+archive/refs/heads/main/clang-r547379.tar.gz -O clang.tar.gz
          mkdir -p clang
          tar -xf clang.tar.gz -C clang
          echo "Clang downloaded and extracted."

      - name: Set up ccache
        run: |
         ccache --version
         ccache --max-size=2G
         ccache --set-config=compression=true
         echo "CCACHE_DIR=$HOME/.ccache" >> $GITHUB_ENV

      - name: Restore ccache from cache
        uses: actions/cache/restore@v4
        with:
         path: ~/.ccache
         key: ${{ matrix.build_type }}-${{ matrix.kernel_config.tag }}-SUSFS_${{ matrix.susfs }}-ccache-

      - name: Preparing kernel
        id: kernel
        run: |
          set -e
 
          # Use the absolute workspace folder
          WORKSPACE_FOLDER="${{ steps.workspace.outputs.workspace-folder }}"
          # Clone the kernel tree into an absolute path
          if [ -z "${{ matrix.kernel_config.kernel_branch }}" ]; then
           KERNEL_BRANCH=""
          else
           KERNEL_BRANCH=" -b ${{ matrix.kernel_config.kernel_branch }}"
          fi

          git clone --depth=1 "${{ matrix.kernel_config.kernel_url }}"$KERNEL_BRANCH "$WORKSPACE_FOLDER/kernel_tree"
          echo "kernel-folder=$WORKSPACE_FOLDER/kernel_tree" >> $GITHUB_OUTPUT
          KERNEL_FOLDER="$WORKSPACE_FOLDER/kernel_tree"
          cd "$KERNEL_FOLDER"

          # Clone additional repositories

          if [ -z "${{ matrix.kernel_config.patches_url }}" ]; then
           PATCHES_URL="https://github.com/TheSillyOk/kernel_ls_patches"
          else
           PATCHES_URL="${{ matrix.kernel_config.patches_url }}"
          fi

          if [ -z "${{ matrix.kernel_config.patches_branch }}" ]; then
           PATCHES_BRANCH=""
          else
           PATCHES_BRANCH=" -b ${{ matrix.kernel_config.patches_branch }}"
          fi

          git clone "$PATCHES_URL"$PATCHES_BRANCH "$WORKSPACE_FOLDER/kernel_patches"
          KERNEL_PATCHES_FOLDER="$WORKSPACE_FOLDER/kernel_patches"
          mkdir -p "$WORKSPACE_FOLDER/kernel_tree/common/fs" "$WORKSPACE_FOLDER/kernel_tree/common/include/linux"

           echo "--- Applying python3.patch... ---"
           patch -p1 -F 3 -N < "$WORKSPACE_FOLDER/kernel_patches/python3.patch" || true

           echo "--- Applying fix_lto.patch... ---"
           patch -p1 < "$WORKSPACE_FOLDER/kernel_patches/fix_lto.patch" || true

           sed -i 's/-dirty//' ./scripts/setlocalversion

           if [ -z "${{ matrix.kernel_config.defconfig }}" ]; then
            DEFCONFIG="vendor/laurel_sprout-perf_defconfig"
           else
            DEFCONFIG="${{ matrix.kernel_config.defconfig }}"
           fi

           sed -i -E 's/^CONFIG_(LTO[^=]*|HAVE_LTO[^=]*|CC_OPTIMIZE_FOR[^=]*|MODVERSIONS)=(y|n)/# CONFIG_\1=\2/g' "arch/arm64/configs/$DEFCONFIG" && echo -e "\n\n# Workflow added configs #\nCONFIG_LTO_CLANG=y\nCONFIG_LTO_CLANG_THIN=y\nCONFIG_HAVE_LTO_CLANG=y\nCONFIG_CC_OPTIMIZE_FOR_PERFORMANCE=y\nCONFIG_MODVERSIONS=n" >> "arch/arm64/configs/$DEFCONFIG"

      - name: Apply KernelSU
        if: ${{ matrix.build_type != 'Normal' }}
        id: ksu
        run: |
          set -e

          WORKSPACE_FOLDER="${{ steps.workspace.outputs.workspace-folder }}"
          KERNEL_FOLDER="$WORKSPACE_FOLDER/kernel_tree"
          KERNEL_PATCHES_FOLDER="$WORKSPACE_FOLDER/kernel_patches"
          cd "$KERNEL_FOLDER"
          
          cp $KERNEL_PATCHES_FOLDER/manual_hooks.patch $KERNEL_FOLDER
          echo "Applying manual_hooks.patch..."
          patch -p1 -F 3 -N < "$KERNEL_FOLDER/manual_hooks.patch" || true

          echo "--- Setting up KernelSU: ${{ matrix.build_type }} ---"
          case "${{ matrix.build_type }}-${{ matrix.susfs }}" in
           KSUN-false)
            curl -LSs "https://raw.githubusercontent.com/rifsxd/KernelSU-Next/next/kernel/setup.sh" | bash -s next
           ;;
           KSUN-true)
            curl -LSs "https://raw.githubusercontent.com/rifsxd/KernelSU-Next/next/kernel/setup.sh" | bash -s next-susfs-dev
           ;;
           *)
            echo "Invalid selection for build_type and/or susfs: ${{ matrix.build_type }}-${{ matrix.susfs }}"
           ;;
          esac
          echo "--- KernelSU setup complete ---"

           if [ -z "${{ matrix.kernel_config.defconfig }}" ]; then
            DEFCONFIG="vendor/laurel_sprout-perf_defconfig"
           else
            DEFCONFIG="${{ matrix.kernel_config.defconfig }}"
           fi

          # Append configuration settings to the defconfig file
           sed -i -E 's/^CONFIG_(KPROBES|TMPFS_XATTR|KSU[^=]*)=(y|n)/# CONFIG_\1=\2/g' "arch/arm64/configs/$DEFCONFIG" && echo -e "\n\n# Workflow added configs #\nCONFIG_KPROBES=n\nCONFIG_KSU=y\nCONFIG_TMPFS_XATTR=y" >> "arch/arm64/configs/$DEFCONFIG"

      - name: Apply SUSFS
        if: ${{ matrix.susfs != 'false' }}
        id: susfs
        run: |
          set -e

          WORKSPACE_FOLDER="${{ steps.workspace.outputs.workspace-folder }}"
          KERNEL_FOLDER="$WORKSPACE_FOLDER/kernel_tree"
          KERNEL_PATCHES_FOLDER="$WORKSPACE_FOLDER/kernel_patches"

          git clone https://gitlab.com/simonpunk/susfs4ksu.git -b kernel-4.14 "$WORKSPACE_FOLDER/susfs4ksu"

          SUSFS4KSU_PATCHES_FOLDER="$WORKSPACE_FOLDER/susfs4ksu/kernel_patches"

          cp $SUSFS4KSU_PATCHES_FOLDER/fs/susfs.c $KERNEL_FOLDER/fs/
          cp $SUSFS4KSU_PATCHES_FOLDER/include/linux/susfs.h $KERNEL_FOLDER/include/linux
          cp $SUSFS4KSU_PATCHES_FOLDER/include/linux/susfs_def.h $KERNEL_FOLDER/include/linux

          cd "$KERNEL_FOLDER"
          echo "--- Applying SUSFS and Hide Stuff Patches ---"

          echo "Applying 50_add_susfs.patch..."
          patch -p1 -F 3 -N < "$SUSFS4KSU_PATCHES_FOLDER/50_add_susfs_in_kernel-4.14.patch" || true

          echo "Applying fix_susfs_rejects.patch..."
          patch -p1 -F 3 -N < "$KERNEL_PATCHES_FOLDER/fix_susfs_rejects.patch" || true

          echo "Applying 69_hide_stuff.patch..."
          patch -p1 -F 3 -N < "$KERNEL_PATCHES_FOLDER/69_hide_stuff.patch" || true

          if [ "${{ matrix.build_type }}" == "KSUN" ]; then
           echo "Applying BACKPORT-SUSFS-v1.5.7-NON-GKI-4.14.patch..."
          patch -p1 -F 3 -N < "$KERNEL_PATCHES_FOLDER/BACKPORT-SUSFS-v1.5.7-NON-GKI-4.14.patch" || true
          fi

          echo "--- SUSFS and Hide Stuff Patches applied ---"
          if [ -z "${{ matrix.kernel_config.defconfig }}" ]; then
            DEFCONFIG="vendor/laurel_sprout-perf_defconfig"
          else
           DEFCONFIG="${{ matrix.kernel_config.defconfig }}"
          fi
          echo -e "\nCONFIG_KSU_SUSFS=y" >> "arch/arm64/configs/$DEFCONFIG"


      - name: Building kernel
        id: build
        run: |
          set -e
          # Use absolute paths for the kernel folder and tools folder
          KERNEL_FOLDER="${{ steps.kernel.outputs.kernel-folder }}"
          TOOLS_FOLDER="${{ steps.workspace.outputs.tools-folder }}"
          cd $KERNEL_FOLDER

          if [ -z "${{ matrix.kernel_config.defconfig }}" ]; then
           DEFCONFIG="vendor/laurel_sprout-perf_defconfig"
          else
           DEFCONFIG="${{ matrix.kernel_config.defconfig }}"
          fi

          if [ -z "${{ matrix.kernel_config.config }}" ]; then
           CONFIG_FILE="$DEFCONFIG"
          else
           CONFIG_FILE="$DEFCONFIG ${{ matrix.kernel_config.config }}"
          fi

          if [[ "${{ matrix.kernel_config.tag }}" == *"SM6125"* ]]; then
           EXTRA=" DTC_PREBUILT=true DTC=$KERNEL_FOLDER/dtc/dtc DTC_OVERLAY_TEST_EXT=$KERNEL_FOLDER/libufdt/ufdt_apply_overlay MKDTIMG=$KERNEL_FOLDER/libufdt/mkdtimg"
           wget https://android.googlesource.com/platform/prebuilts/misc/+archive/refs/tags/android-15.0.0_r26/linux-x86.tar.gz -O androd.tar.gz
           tar -xzf androd.tar.gz
           git clone https://github.com/TheSillyOk/kernel_extra -b main extra
           rm dtc/dtc && mv extra/dtc dtc/dtc
           chmod +x dtc/dtc
          else
           EXTRA=""
          fi

          echo "Building kernel using absolute paths..."
          export CCACHE_EXEC=$(which ccache)
          export ARCH=arm64
          export SUBARCH=arm64
          export KBUILD_BUILD_USER="Ok"
          export KBUILD_BUILD_HOST="Github"
          export PATH="$TOOLS_FOLDER/clang/bin:$PATH"
          BUILD_START_TIME=$(date +%s)

          mkdir -p "$KERNEL_FOLDER/artifacts"

          make O="$KERNEL_FOLDER/out" ARCH=arm64 $CONFIG_FILE
          make O="$KERNEL_FOLDER/out"$EXTRA CC="ccache clang" LD=ld.lld LLVM=1 LLVM_IAS=1 -j"$(nproc --all)" CROSS_COMPILE=aarch64-linux-gnu-

          BUILD_END_TIME=$(date +%s)
          DIFF=$((BUILD_END_TIME - BUILD_START_TIME))
          echo "elapsed_time=$DIFF" >> $GITHUB_OUTPUT
          echo -e "Build completed in $((DIFF / 60)) minute(s) and $((DIFF % 60)) seconds."

      - name: Save ccache to cache
        uses: actions/cache/save@v4
        with:
         path: ~/.ccache
         key: ${{ matrix.build_type }}-${{ matrix.kernel_config.tag }}-SUSFS_${{ matrix.susfs }}-ccache-${{ github.sha }}-${{ github.run_number }}

      - name: Handle AnyKernel3 zips
        id: anykernel
        run: |
          set -e
          KERNEL_FOLDER="${{ steps.kernel.outputs.kernel-folder }}"
          BOOT_FOLDER="$KERNEL_FOLDER/out/arch/arm64/boot"
          cd "$BOOT_FOLDER"

          if [ -z "${{ matrix.kernel_config.anykernel_url }}" ]; then
           AK_URL="https://github.com/TheSillyOk/anykernel"
          else
           AK_URL="${{ matrix.kernel_config.anykernel_url }}"
          fi

          if [ -z "${{ matrix.kernel_config.anykernel_branch }}" ]; then
           AK_BRANCH=""
          else
           AK_BRANCH=" -b ${{ matrix.kernel_config.anykernel_branch }}"
          fi

          git clone --recursive --depth=1 "$AK_URL"$AK_BRANCH "$BOOT_FOLDER/ak_folder"

          if [ -e "$BOOT_FOLDER/Image.gz-dtb" ]; then
            cp -f "$BOOT_FOLDER/Image.gz-dtb" "$BOOT_FOLDER/ak_folder"
          else

           if [ -e "$BOOT_FOLDER/Image.gz" ]; then
             cp -f "$BOOT_FOLDER/Image.gz" "$BOOT_FOLDER/ak_folder"
           fi

          fi

          if [ -e "$BOOT_FOLDER/dtbo.img" ]; then
            cp -f "$BOOT_FOLDER/dtbo.img" "$BOOT_FOLDER/ak_folder"
          fi

          case "${{ matrix.build_type }}-${{ matrix.susfs }}" in
           KSUN-false)
            BUILD="-[KSUNext]"
           ;;
           KSUN-true)
            BUILD="-[KSUNext-SUSFS]"
           ;;
           Normal*)
            BUILD=""
           ;;
           *)
            BUILD=""
            echo "Invalid selection for build_type and/or susfs: ${{ matrix.build_type }}-${{ matrix.susfs }}"
           ;;
          esac


          date="$(date +"%d%m%Y")"
          zip_name="$date-MiA3$BUILD-${{ matrix.kernel_config.tag }}-${{ github.run_number }}"
          mkdir release
          rm -rf ak_folder/*.git*
          cp -r ak_folder/* release
          echo "anykernel_zipname=$zip_name" >> $GITHUB_OUTPUT

      - name: Upload AnyKernel Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.anykernel.outputs.anykernel_zipname }}
          path: |
            ${{ steps.kernel.outputs.kernel-folder }}/out/arch/arm64/boot/release/


#      - name: Upload to Release
#        uses: softprops/action-gh-release@v2
#        with:
#          files: |
#            ${{ steps.kernel.outputs.kernel-folder }}/out/arch/arm64/boot/${{ steps.anykernel.outputs.anykernel_zipname }}
#            ${{ steps.kernel.outputs.kernel-folder }}/out/arch/arm64/boot/${{ steps.second_anykernel.outputs.second_anykernel_zipname }}
#          name: laurel_sprout-${{ github.run_id }}
#          tag_name: ${{ github.run_id }}
#          body: |
#            <b>${{ steps.workspace.outputs.build_title }}</b>
#            <b>Kernel successfully built!</b>, took ${{ steps.build.outputs.elapsed_time }} seconds.
#
#            <b>Kernel tree</b>: https://github.com/TheSillyOk/kernel_laurel_sprout/tree/lineage-22.1
#            <b>Action</b>: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
