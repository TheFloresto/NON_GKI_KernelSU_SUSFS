 name: Kernel Build (KSUNext+SUSFS)
 on:
  workflow_call:
   inputs:
     kernel_url:
      type: string
      required: true
     kernel_branch:
      type: string
      required: true
     patches_url:
      type: string
      required: true
     patches_branch:
      type: string
      required: true
     anykernel_url:
      type: string
      required: true
     anykernel_branch:
      type: string
      required: true
     tag:
      type: string
      required: true
     ksu_url:
      type: string
      required: true
     ksu_branch:
      type: string
      required: false
     susfs:
      type: string
      required: true
     build_type:
      type: string
      required: true
     defconfig:
      type: string
      required: true
     config:
      type: string
      required: false
 jobs:
  build:
    if: github.event.repository.owner.id == github.event.sender.id
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Maximize build space
        uses: easimon/maximize-build-space@master
        with:
          root-reserve-mb: 8192
          temp-reserve-mb: 2048
          swap-size-mb: 8192
          remove-dotnet: "true"
          remove-android: "true"
          remove-haskell: "true"
          remove-codeql: "true"

      - name: Initialize workspace and tools
        id: workspace
        run: |
          set -e
          # Define an absolute workspace folder inside the GitHub workspace
          WORKSPACE_FOLDER="${GITHUB_WORKSPACE}/workspace"
          mkdir -p "$WORKSPACE_FOLDER"
          echo "workspace-folder=$WORKSPACE_FOLDER" >> $GITHUB_OUTPUT
          echo "start_time=$(date +%s)" >> $GITHUB_OUTPUT

          sudo apt-get update -y -qq
          sudo apt-get install -y --no-install-recommends \
            python3-pip \
            git \
            zip \
            unzip \
            gcc \
            g++ \
            make \
            ninja-build \
            file \
            bc \
            bison \
            flex \
            libfl-dev \
            libssl-dev \
            libelf-dev \
            wget \
            build-essential \
            python3-dev \
            python3-setuptools \
            rsync \
            ccache \
            llvm-dev

          sudo apt install libncurses6 libfdt-dev
          # Also output a tools folder variable (same as workspace here)
          echo "tools-folder=$WORKSPACE_FOLDER" >> $GITHUB_OUTPUT

      - name: Cache Clang
        uses: actions/cache@v4
        id: cache-clang
        with:
          path: ${{ steps.workspace.outputs.workspace-folder }}/clang
          key: clang-r547379-ubuntu-latest
          restore-keys: |
            clang-r547379-ubuntu-latest
            clang-r547379-

      - name: Download and Extract Clang
        if: steps.cache-clang.outputs.cache-hit != 'true'
        working-directory: ${{ steps.workspace.outputs.workspace-folder }}
        run: |
          set -e
          echo "Downloading and extracting clang..."
          wget https://android.googlesource.com/platform/prebuilts/clang/host/linux-x86/+archive/refs/heads/main/clang-r547379.tar.gz -O clang.tar.gz
          mkdir -p clang
          tar -xf clang.tar.gz -C clang
          echo "Clang downloaded and extracted."

      - name: Set up ccache
        run: |
         ccache --version
         ccache --max-size=2G
         ccache --set-config=compression=true
         echo "CCACHE_DIR=$HOME/.ccache" >> $GITHUB_ENV

      - name: Restore ccache from cache
        uses: actions/cache/restore@v4
        with:
         path: ~/.ccache
         key: ${{ inputs.build_type }}-${{ inputs.tag }}-ccache-

      - name: Preparing kernel
        id: kernel
        run: |
          set -e
 
          # Use the absolute workspace folder
          WORKSPACE_FOLDER="${{ steps.workspace.outputs.workspace-folder }}"
          # Clone the kernel tree into an absolute path
          git clone --depth=1 "${{ inputs.kernel_url }}" -b "${{ inputs.kernel_branch }}" "$WORKSPACE_FOLDER/kernel_tree"
          echo "kernel-folder=$WORKSPACE_FOLDER/kernel_tree" >> $GITHUB_OUTPUT
          KERNEL_FOLDER="$WORKSPACE_FOLDER/kernel_tree"
          cd "$KERNEL_FOLDER"

          # Clone additional repositories into the absolute workspace folder

          git clone "${{ inputs.patches_url }}" -b "${{ inputs.patches_branch }}" "$WORKSPACE_FOLDER/kernel_patches"
          KERNEL_PATCHES_FOLDER="$WORKSPACE_FOLDER/kernel_patches"
          mkdir -p "$WORKSPACE_FOLDER/kernel_tree/common/fs" "$WORKSPACE_FOLDER/kernel_tree/common/include/linux"

           echo "Applying python3.patch..."
           patch -p1 -F 3 -N < "$WORKSPACE_FOLDER/kernel_patches/python3.patch" || true

           echo "Applying fix_lto.patch..."
           patch -p1 < "$WORKSPACE_FOLDER/kernel_patches/fix_lto.patch" || true

           sed -i 's/-dirty//' ./scripts/setlocalversion

           sed -i -E 's/^CONFIG_(LTO[^=]*|HAVE_LTO[^=]*|CC_OPTIMIZE_FOR[^=]*|MODVERSIONS)=(y|n)/# CONFIG_\1=\2/g' "arch/arm64/configs/${{ inputs.defconfig }}" && echo -e "\n\n# Workflow added configs #\nCONFIG_LTO_CLANG=y\nCONFIG_LTO_CLANG_THIN=y\nCONFIG_HAVE_LTO_CLANG=y\nCONFIG_CC_OPTIMIZE_FOR_PERFORMANCE=y\nCONFIG_MODVERSIONS=n" >> "arch/arm64/configs/${{ inputs.defconfig }}"

      - name: Apply KernelSU
        if: ${{ inputs.ksu_url != 'false' }}
        run: |
          set -e

          # Define absolute paths
          WORKSPACE_FOLDER="${{ steps.workspace.outputs.workspace-folder }}"
          KERNEL_FOLDER="$WORKSPACE_FOLDER/kernel_tree"
  
          # Change to the kernel root using its absolute path
          cd "$KERNEL_FOLDER"
          KERNEL_PATCHES_FOLDER="$WORKSPACE_FOLDER/kernel_patches"

          # Manual hooks
          cp $KERNEL_PATCHES_FOLDER/manual_hooks.patch $KERNEL_FOLDER
          echo "Applying manual_hooks.patch..."
          patch -p1 -F 3 -N < "$KERNEL_FOLDER/manual_hooks.patch" || true

          echo "--- Setting up KernelSU ---"
          curl -LSs "${{ inputs.ksu_url }}" | bash -s "${{ inputs.ksu_branch }}"
          echo "--- KernelSU setup complete ---"

          # Append configuration settings to the defconfig file
           sed -i -E 's/^CONFIG_(KPROBES|TMPFS_XATTR|KSU[^=]*)=(y|n)/# CONFIG_\1=\2/g' "arch/arm64/configs/${{ inputs.defconfig }}" && echo -e "\n\n# Workflow added configs #\nCONFIG_KPROBES=n\nCONFIG_KSU=y\nCONFIG_TMPFS_XATTR=y" >> "arch/arm64/configs/${{ inputs.defconfig }}"

      - name: Apply SUSFS
        if: ${{ inputs.susfs != 'false' }}
        run: |
          set -e

          WORKSPACE_FOLDER="${{ steps.workspace.outputs.workspace-folder }}"
          KERNEL_FOLDER="$WORKSPACE_FOLDER/kernel_tree"
          KERNEL_PATCHES_FOLDER="$WORKSPACE_FOLDER/kernel_patches"

          git clone https://gitlab.com/simonpunk/susfs4ksu.git -b kernel-4.14 "$WORKSPACE_FOLDER/susfs4ksu"

          SUSFS4KSU_PATCHES_FOLDER="$WORKSPACE_FOLDER/susfs4ksu/kernel_patches"

          cp $SUSFS4KSU_PATCHES_FOLDER/fs/susfs.c $KERNEL_FOLDER/fs/
          cp $SUSFS4KSU_PATCHES_FOLDER/include/linux/susfs.h $KERNEL_FOLDER/include/linux
          cp $SUSFS4KSU_PATCHES_FOLDER/include/linux/susfs_def.h $KERNEL_FOLDER/include/linux

          cd "$KERNEL_FOLDER"
          echo "--- Applying SUSFS and Hide Stuff Patches ---"

          echo "Applying 50_add_susfs.patch..."
          patch -p1 -F 3 -N < "$SUSFS4KSU_PATCHES_FOLDER/50_add_susfs_in_kernel-4.14.patch" || true

          echo "Applying fix_susfs_rejects.patch..."
          patch -p1 -F 3 -N < "$KERNEL_PATCHES_FOLDER/fix_susfs_rejects.patch" || true

          echo "Applying 69_hide_stuff.patch..."
          patch -p1 -F 3 -N < "$KERNEL_PATCHES_FOLDER/69_hide_stuff.patch" || true

          echo "Applying BACKPORT-SUSFS-v1.5.7-NON-GKI-4.14.patch..."
          patch -p1 -F 3 -N < "$KERNEL_PATCHES_FOLDER/BACKPORT-SUSFS-v1.5.7-NON-GKI-4.14.patch" || true

          echo "--- SUSFS and Hide Stuff Patches applied ---"
          echo -e "\nCONFIG_KSU_SUSFS=y" >> "arch/arm64/configs/${{ inputs.defconfig }}"


      - name: Building kernel
        id: build
        run: |
          set -e
          # Use absolute paths for the kernel folder and tools folder
          KERNEL_FOLDER="${{ steps.kernel.outputs.kernel-folder }}"
          TOOLS_FOLDER="${{ steps.workspace.outputs.tools-folder }}"
          cd $KERNEL_FOLDER

          if [ -z "${{ inputs.config }}" ]; then
           CONFIG_FILE="${{ inputs.defconfig }}"
          else
           CONFIG_FILE="${{ inputs.defconfig }} ${{ inputs.config }}"
          fi

          if [[ "${{ inputs.tag }}" == *"SM6125"* ]]; then
           EXTRA=" DTC_PREBUILT=true DTC=$KERNEL_FOLDER/dtc/dtc DTC_OVERLAY_TEST_EXT=$KERNEL_FOLDER/libufdt/ufdt_apply_overlay MKDTIMG=$KERNEL_FOLDER/libufdt/mkdtimg"
           wget https://android.googlesource.com/platform/prebuilts/misc/+archive/refs/tags/android-15.0.0_r26/linux-x86.tar.gz -O androd.tar.gz
           tar -xzf androd.tar.gz
           git clone https://github.com/TheSillyOk/kernel_extra -b main extra
           rm dtc/dtc && mv extra/dtc dtc/dtc
           chmod +x dtc/dtc
          else
           EXTRA=""
          fi

          echo "Building kernel using absolute paths..."
          export CCACHE_EXEC=$(which ccache)
          export ARCH=arm64
          export SUBARCH=arm64
          export KBUILD_BUILD_USER="Ok"
          export KBUILD_BUILD_HOST="Github"
          export PATH="$TOOLS_FOLDER/clang/bin:$PATH"
          BUILD_START_TIME=$(date +%s)

          mkdir -p "$KERNEL_FOLDER/artifacts"

          make O="$KERNEL_FOLDER/out" ARCH=arm64 $CONFIG_FILE
          make O="$KERNEL_FOLDER/out"$EXTRA CC="ccache clang" LD=ld.lld LLVM=1 LLVM_IAS=1 -j"$(nproc --all)" CROSS_COMPILE=aarch64-linux-gnu-

          BUILD_END_TIME=$(date +%s)
          DIFF=$((BUILD_END_TIME - BUILD_START_TIME))
          echo "elapsed_time=$DIFF" >> $GITHUB_OUTPUT
          echo -e "Build completed in $((DIFF / 60)) minute(s) and $((DIFF % 60)) seconds."

      - name: Save ccache to cache
        uses: actions/cache/save@v4
        with:
         path: ~/.ccache
         key: ${{ inputs.build_type }}-${{ inputs.tag }}-ccache-${{ github.sha }}-${{ github.run_number }}

      - name: Handle AnyKernel3 zips
        id: anykernel
        run: |
          set -e
          KERNEL_FOLDER="${{ steps.kernel.outputs.kernel-folder }}"
          BOOT_FOLDER="$KERNEL_FOLDER/out/arch/arm64/boot"
          cd "$BOOT_FOLDER"

          git clone --recursive --depth=1 "${{ inputs.anykernel_url }}" -b "${{ inputs.anykernel_branch }}" "$BOOT_FOLDER/ak_folder"

          if [ -e "$BOOT_FOLDER/Image.gz-dtb" ]; then
            cp -f "$BOOT_FOLDER/Image.gz-dtb" "$BOOT_FOLDER/ak_folder"
          else

           if [ -e "$BOOT_FOLDER/Image.gz" ]; then
             cp -f "$BOOT_FOLDER/Image.gz" "$BOOT_FOLDER/ak_folder"
           fi

          fi

          if [ -e "$BOOT_FOLDER/dtbo.img" ]; then
            cp -f "$BOOT_FOLDER/dtbo.img" "$BOOT_FOLDER/ak_folder"
          fi

          date="$(date +"%d%m%Y")"
          zip_name="$date-MiA3${{ inputs.build_type }}-${{ inputs.tag }}-${{ github.run_number }}"
          mkdir release
          rm -rf ak_folder/*.git*
          cp -r ak_folder/* release
          echo "anykernel_zipname=$zip_name" >> $GITHUB_OUTPUT
          
#      - name: Upload to Release
#        uses: softprops/action-gh-release@v2
#        with:
#          files: |
#            ${{ steps.kernel.outputs.kernel-folder }}/out/arch/arm64/boot/${{ steps.anykernel.outputs.anykernel_zipname }}
#            ${{ steps.kernel.outputs.kernel-folder }}/out/arch/arm64/boot/${{ steps.second_anykernel.outputs.second_anykernel_zipname }}
#          name: laurel_sprout-${{ github.run_id }}
#          tag_name: ${{ github.run_id }}
#          body: |
#            <b>${{ steps.workspace.outputs.build_title }}</b>
#            <b>Kernel successfully built!</b>, took ${{ steps.build.outputs.elapsed_time }} seconds.
#
#            <b>Kernel tree</b>: https://github.com/TheSillyOk/kernel_laurel_sprout/tree/lineage-22.1
#            <b>Action</b>: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
#      - name: Upload Kernel Artifacts (if not releasing)
#        if: ${{ github.event.inputs.UPLOAD_TO_RELEASE != 'true' }}
#        uses: actions/upload-artifact@v4
#        with:
#          name: Kernel-Artifacts
#          path: |
#            ${{ steps.kernel.outputs.kernel-folder }}/out/arch/arm64/boot/Image.gz-dtb
#            ${{ steps.kernel.outputs.kernel-folder }}/out/arch/arm64/boot/dtbo.img

      - name: Upload AnyKernel Artifacts
        if: ${{ github.event.inputs.UPLOAD_TO_RELEASE != 'true' }}
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.anykernel.outputs.anykernel_zipname }}
          path: |
            ${{ steps.kernel.outputs.kernel-folder }}/out/arch/arm64/boot/release/
